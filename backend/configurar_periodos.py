#!/usr/bin/env python
"""
Script simple para configurar per√≠odos acad√©micos
"""
import os
import sys
import django
from datetime import date

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_grado_api.settings')

try:
    django.setup()
    print("‚úÖ Django configurado correctamente")
except Exception as e:
    print(f"‚ùå Error configurando Django: {e}")
    sys.exit(1)

try:
    from competencias.models import PeriodoAcademico, Evaluacion
    print("‚úÖ Modelos importados correctamente")
except Exception as e:
    print(f"‚ùå Error importando modelos: {e}")
    sys.exit(1)

def main():
    print("üöÄ Configurando sistema de per√≠odos acad√©micos...")
    
    # 1. Crear per√≠odo acad√©mico actual
    print("\nüìÖ Creando per√≠odo acad√©mico actual...")
    fecha_actual = date.today()
    a√±o = fecha_actual.year
    mes = fecha_actual.month
    semestre = 1 if mes <= 6 else 2
    
    # Verificar si ya existe
    periodo_existente = PeriodoAcademico.objects.filter(
        a√±o=a√±o,
        semestre=semestre
    ).first()
    
    if periodo_existente:
        print(f"   ‚úÖ Per√≠odo existente: {periodo_existente.codigo} - {periodo_existente.nombre}")
        periodo_actual = periodo_existente
    else:
        # Crear fechas del per√≠odo
        if semestre == 1:
            fecha_inicio = date(a√±o, 1, 1)
            fecha_fin = date(a√±o, 6, 30)
            nombre = f"Primer Semestre {a√±o}"
        else:
            fecha_inicio = date(a√±o, 7, 1)
            fecha_fin = date(a√±o, 12, 31)
            nombre = f"Segundo Semestre {a√±o}"
        
        # Desactivar otros per√≠odos
        PeriodoAcademico.objects.filter(activo=True).update(activo=False)
        
        # Crear nuevo per√≠odo
        periodo_actual = PeriodoAcademico.objects.create(
            a√±o=a√±o,
            semestre=semestre,
            nombre=nombre,
            fecha_inicio=fecha_inicio,
            fecha_fin=fecha_fin,
            activo=True
        )
        
        print(f"   ‚úÖ Per√≠odo creado: {periodo_actual.codigo} - {periodo_actual.nombre}")
    
    # 2. Asignar per√≠odo a evaluaciones existentes
    print("\nüìä Asignando per√≠odo a evaluaciones existentes...")
    evaluaciones_sin_periodo = Evaluacion.objects.filter(periodo__isnull=True)
    total_sin_periodo = evaluaciones_sin_periodo.count()
    
    if total_sin_periodo > 0:
        evaluaciones_actualizadas = evaluaciones_sin_periodo.update(periodo=periodo_actual)
        print(f"   ‚úÖ {evaluaciones_actualizadas} evaluaciones asignadas al per√≠odo {periodo_actual.codigo}")
    else:
        print("   ‚úÖ Todas las evaluaciones ya tienen per√≠odo asignado")
    
    # 3. Verificar configuraci√≥n
    print("\nüîç Verificando configuraci√≥n...")
    total_evaluaciones = Evaluacion.objects.count()
    evaluaciones_con_periodo = Evaluacion.objects.filter(periodo__isnull=False).count()
    
    print(f"   üìà Total de evaluaciones: {total_evaluaciones}")
    print(f"   ‚úÖ Evaluaciones con per√≠odo: {evaluaciones_con_periodo}")
    
    # Mostrar per√≠odos
    print(f"\nüìã Per√≠odos acad√©micos:")
    periodos = PeriodoAcademico.objects.all().order_by('-a√±o', '-semestre')
    for periodo in periodos:
        count = Evaluacion.objects.filter(periodo=periodo).count()
        estado = "ACTIVO" if periodo.activo else "Inactivo"
        print(f"   {periodo.codigo} - {periodo.nombre} ({estado}): {count} evaluaciones")
    
    print(f"\nüéâ ¬°Configuraci√≥n completada exitosamente!")

if __name__ == "__main__":
    main()
